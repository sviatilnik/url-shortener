// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/storages/storage.go

// Package mock_storages is a generated GoMock package.
package mock_storages

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sviatilnik/url-shortener/internal/app/models"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// BatchSave mocks base method.
func (m *MockURLStorage) BatchSave(ctx context.Context, links []*models.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSave", ctx, links)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSave indicates an expected call of BatchSave.
func (mr *MockURLStorageMockRecorder) BatchSave(ctx, links interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*MockURLStorage)(nil).BatchSave), ctx, links)
}

// Delete mocks base method.
func (m *MockURLStorage) Delete(ctx context.Context, IDs []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, IDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockURLStorageMockRecorder) Delete(ctx, IDs, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLStorage)(nil).Delete), ctx, IDs)
}

// Get mocks base method.
func (m *MockURLStorage) Get(ctx context.Context, shortCode string) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortCode)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLStorageMockRecorder) Get(ctx, shortCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLStorage)(nil).Get), ctx, shortCode)
}

// GetUserLinks mocks base method.
func (m *MockURLStorage) GetUserLinks(ctx context.Context, userID string) ([]*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLinks", ctx, userID)
	ret0, _ := ret[0].([]*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLinks indicates an expected call of GetUserLinks.
func (mr *MockURLStorageMockRecorder) GetUserLinks(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLinks", reflect.TypeOf((*MockURLStorage)(nil).GetUserLinks), ctx, userID)
}

// Save mocks base method.
func (m *MockURLStorage) Save(ctx context.Context, link *models.Link) (*models.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, link)
	ret0, _ := ret[0].(*models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockURLStorageMockRecorder) Save(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockURLStorage)(nil).Save), ctx, link)
}
